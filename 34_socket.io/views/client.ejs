<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="/socket.io/socket.io.js"></script>
    <title>socket.io로 채팅</title>
  </head>
  <body>
    <ul></ul>
    <form id="chat">
      <input type="text" id="user" placeholder="user" /><br />
      <input type="text" id="message" placeholder="message...✏️" /><br />
      <button>입력</button>
    </form>
    <script>
      // socket 연결 - io() 함수가 클라이언트의 소켓 생성 및 연결 설정
      const socket = io();

      /*
              1. emit에서 on으로 같은 이벤트 이름을 가진 곳으로 인자를 전달
              2. on의 콜백에서 전달된 인자를 받아줌
              3. on의 콜백의 cb로 emit에게 값을 전달
              4. emit에서는 마지막 매개변수인 콜백의 인자에 on이 전달한 값이 있음
          */
      //   socket.emit('event_name', 'hello', 10, { name: 'allie' }, (res) => {
      //     console.log(res);
      //   });

      const chatForm = document.querySelector('#chat');
      const ul = document.querySelector('ul');

      chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const user = document.querySelector('#user');
        const message = document.querySelector('#message');

        const data = {
          name: user.value,
          message: message.value,
        };

        socket.emit(
          'new_message',
          data
          // , (res) => {
          //   const li = document.createElement('li');
          //   li.innerText = `${res.name}: ${res.message}`;
          //   ul.append(li);
          // }
        );

        socket.on('message_render', (res) => {
          const li = document.createElement('li');
          li.innerText = `${res.name}: ${res.message}`;
          ul.append(li);
          user.value = '';
          message.value = '';
        });
      });
    </script>
  </body>
</html>
